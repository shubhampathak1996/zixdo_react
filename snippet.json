{
  "Clean Hook": {
    "prefix": "clean-hook-generator",
    "body": [
      "import { useState, useEffect } from \"react\";",
      "import { useSelector, useDispatch } from \"react-redux\";",
      "import {",
      "  add$1,",
      "  get$1s,",
      "  get$1,",
      "  edit$1,",
      "  delete$1,",
      "  getAll$1s,",
      "} from \"../../store/actions/$2_action\";",
      "import { SEARCH_TERMS } from \"../enums/$2s_enum\";",
      "",
      "// Get All Data",
      "export const useAll$1s = () => {",
      "  const dispatch = useDispatch();",
      "  const data = useSelector((state) => state.$2);",
      "  const [pageNumber, setPageNumber] = useState(1);",
      "  const [deleteEntry, setDeleteEntry] = useState(null);",
      "  const [q, setQ] = useState(null);",
      "  const [term, setTerm] = useState(null);",
      "  const [termField, setTermField] = useState(SEARCH_TERMS[0]);",
      "  const [dateFrom, setDateFrom] = useState(\"\");",
      "  const [dateTo, setDateTo] = useState(\"\");",
      "  useEffect(() => {",
      "    async function allQuery() {",
      "      const params = new URLSearchParams(window.location.search);",
      "",
      "      const paramsObj = Array.from(params.keys()).reduce(",
      "        (acc, val) => ({ ...acc, [val]: params.get(val) }),",
      "        {}",
      "      );",
      "      let newQParams = ``;",
      "      Object.keys(paramsObj) &&",
      "        Object.keys(paramsObj).map((item, index) => {",
      "          newQParams += `&exact[${item}]=${paramsObj[item]}`;",
      "        });",
      "      if (deleteEntry) {",
      "        await dispatch(delete$1(deleteEntry));",
      "      }",
      "      if (term && term.length > 0) {",
      "        setQ(term);",
      "        dispatch(",
      "          get$1s({",
      "            termField: termField ? termField : termField,",
      "            term: q ? q : \"\",",
      "            pageNumber,",
      "            start_from: dateFrom,",
      "            start_to: dateTo,",
      "            queryParams: newQParams,",
      "          })",
      "        );",
      "      } else {",
      "        dispatch(",
      "          get$1s({",
      "            termField: termField ? termField : termField,",
      "            term: q ? q : \"\",",
      "            pageNumber,",
      "            start_from: dateFrom,",
      "            start_to: dateTo,",
      "            queryParams: newQParams,",
      "          })",
      "        );",
      "      }",
      "    }",
      "    allQuery();",
      "  }, [deleteEntry, term, pageNumber, dateFrom, dateTo, window.location.search]);",
      "  useEffect(() => {",
      "    setPageNumber(1);",
      "  }, [term, dateTo, dateFrom]);",
      "",
      "  const deleteBtnClicked = async (id) => {",
      "    setDeleteEntry(id);",
      "  };",
      "  const resetFilter = () => {",
      "    setPageNumber(1);",
      "    setQ(null);",
      "    setTerm(\"\");",
      "    setDateFrom(\"\");",
      "    setDateTo(\"\");",
      "    dispatch(get$1s({}));",
      "  };",
      "",
      "  return [",
      "    data,",
      "    pageNumber,",
      "    setPageNumber,",
      "    q,",
      "    term,",
      "    setTerm,",
      "    termField,",
      "    setTermField,",
      "    dateFrom,",
      "    setDateFrom,",
      "    dateTo,",
      "    setDateTo,",
      "    deleteBtnClicked,",
      "    resetFilter,",
      "  ];",
      "};",
      "",
      "// Get Single Data",
      "export const useSingle$1 = (id) => {",
      "  const dispatch = useDispatch();",
      "  const data = useSelector((state) => state.$2);",
      "  useEffect(() => {",
      "    dispatch(get$1(id));",
      "  }, [id]);",
      "  return [data];",
      "};",
      "// Add Data",
      "export const useCreate$1 = () => {",
      "  const dispatch = useDispatch();",
      "  const addData = async (data) => {",
      "    await dispatch(add$1(data));",
      "  };",
      "  return [addData];",
      "};",
      "export const useUpdate$1 = () => {",
      "  const dispatch = useDispatch();",
      "  const updateData = async (id, data) => {",
      "    await dispatch(edit$1(id, data));",
      "  };",
      "  return [updateData];",
      "};",
      "",
      "export const useSelectAll$1 = () => {",
      "  const dispatch = useDispatch();",
      "  const data = useSelector((state) => state.$2);",
      "  useEffect(() => {",
      "    dispatch(getAll$1s());",
      "  }, []);",
      "  return [data];",
      "};",
      ""
    ],
    "description": "Clean Hook"
  },
  "Clean Add Page Generator": {
    "prefix": "clean-add-page-generator",
    "body": [
      "import React, { useState } from \"react\";",
      "import BreadCrumb from \"../../components/template/BreadCrumb\";",
      "import Header from \"../../components/template/Header\";",
      "import { useHistory } from \"react-router-dom\";",
      "import AddForm from \"../../components/common/AddForm\";",
      "import { convertToFormData } from \"../../shared/upload\";",
      "import {",
      "  initialValues,",
      "  inputFields,",
      "  PAGE_TITLE,",
      "  PAGE_SINGLE_TITLE,",
      "  LINK_URL,",
      "} from \"../../shared/enums/$2s_enum\";",
      "import { useEffect } from \"react\";",
      "import { useCreate$1, useAll$1s } from \"../../shared/hooks/Use$1\";",
      "const Add$1 = ({}) => {",
      "  let history = useHistory();",
      "  const [addData] = useCreate$1();",
      "  const [featuredImage, setFeaturedImage] = useState(null);",
      "  const [gallery, setGallery] = useState(null);",
      "",
      "  const submitFormClicked = async (values) => {",
      " const data = await convertToFormData({ values, featuredImage });",
      "    await addData(data);",
      "    history.push(`/\\${LINK_URL}`);",
      "  };",
      "",
      "  return (",
      "    <div className=\"pace-done\">",
      "      <div>",
      "        <Header />",
      "        <BreadCrumb",
      "          title={`Add \\${PAGE_SINGLE_TITLE}`}",
      "          mainLinkTitle={PAGE_TITLE}",
      "          mainLinkUrl={LINK_URL}",
      "          activeLink=\"Add\"",
      "        />",
      "      </div>",
      "      <div className=\"container-fluid\">",
      "        <div className=\"col-lg-9\">",
      "          <div className=\"card\">",
      "            <div className=\"card-header\">",
      "              <h4 className=\"card-title\"> {PAGE_SINGLE_TITLE} </h4>",
      "              <p className=\"card-title-desc\">",
      "                Enter Details to add {PAGE_SINGLE_TITLE}",
      "              </p>",
      "            </div>",
      "            <AddForm",
      "              edit={false}",
      "              featuredImage={featuredImage}",
      "              gallery={gallery}",
      "              setFeaturedImage={setFeaturedImage}",
      "              setGallery={setGallery}",
      "              submitForm={submitFormClicked}",
      "              inputFields={inputFields}",
      "              initialValues={initialValues}",
      "            />",
      "          </div>",
      "        </div>",
      "      </div>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default Add$1;",
      ""
    ],
    "description": "Clean Add Page Generator"
  },
  "Clean All Page Generator": {
    "prefix": "clean-all-page-generator",
    "body": [
      "import React, { useState, useEffect } from \"react\";",
      "import BreadCrumb from \"../../components/template/BreadCrumb\";",
      "import Header from \"../../components/template/Header\";",
      "import Pagination from \"../../components/common/Pagination\";",
      "import Filters from \"../../components/common/Filters\";",
      "import AddBtn from \"../../components/common/AddBtn\";",
      "import {",
      "  SEARCH_TERMS,",
      "  view_all_table,",
      "  PAGE_TITLE,",
      "  PAGE_SINGLE_TITLE,",
      "  LINK_URL,",
      "} from \"../../shared/enums/$2s_enum\";",
      "import DataTable from \"../../components/common/DataTable\";",
      "import { useAll$1s } from \"../../shared/hooks/Use$1\";",
      "const All$1s = ({}) => {",
      "  const [",
      "    data,",
      "    pageNumber,",
      "    setPageNumber,",
      "    q,",
      "    term,",
      "    setTerm,",
      "    termField,",
      "    setTermField,",
      "    dateFrom,",
      "    setDateFrom,",
      "    dateTo,",
      "    setDateTo,",
      "    deleteBtnClicked,",
      "    resetFilter,",
      "  ] = useAll$1s();",
      "  const { loading, $2s, total_$2s, page, pages } = data;",
      "",
      "  return (",
      "    <div className=\"pace-done\">",
      "      <div>",
      "        <Header />",
      "        <BreadCrumb",
      "          title={PAGE_TITLE}",
      "          mainLinkTitle=\"Dashboard\"",
      "          mainLinkUrl=\"/dashboard\"",
      "          activeLink={PAGE_TITLE}",
      "        />",
      "",
      "        <div className=\"container-fluid\">",
      "          <div className=\"row\">",
      "            <div className=\"col-lg-10\">",
      "              <div",
      "                className=\"card\"",
      "                style={{ boxShadow: \"rgb(227 233 243) 0px 4px 22px\" }}",
      "              >",
      "                <div className=\"card-body\">",
      "                  <AddBtn item={LINK_URL} title={PAGE_SINGLE_TITLE} />",
      "                  {total_$2s} records found",
      "                  <hr />",
      "                  <Filters",
      "                    q={q}",
      "                    resetFilter={resetFilter}",
      "                    setTerm={setTerm}",
      "                    term={term}",
      "                    termField={termField}",
      "                    setTermField={setTermField}",
      "                    all_terms={SEARCH_TERMS}",
      "                    dateFrom={dateFrom}",
      "                    setDateFrom={setDateFrom}",
      "                    dateTo={dateTo}",
      "                    setDateTo={setDateTo}",
      "                  />",
      "                  <hr />",
      "                  <div>",
      "                    <DataTable",
      "                      keys={view_all_table}",
      "                      data={$2s}",
      "                      field={LINK_URL}",
      "                      page={page}",
      "                      deleteBtnClicked={deleteBtnClicked}",
      "                      loading={loading}",
      "                    />",
      "                    <Pagination",
      "                      data={$2s}",
      "                      page={page}",
      "                      pages={pages}",
      "                      count={total_$2s}",
      "                      setPage={setPageNumber}",
      "                      loading={loading}",
      "                    />",
      "                  </div>",
      "                </div>",
      "              </div>",
      "            </div>",
      "          </div>",
      "        </div>",
      "      </div>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default All$1s;",
      ""
    ],
    "description": "Clean All Page Generator"
  },
  "Clean Edit Page Generator": {
    "prefix": "clean-edit-page-generator",
    "body": [
      "import React, { useEffect, useState } from \"react\";",
      "import BreadCrumb from \"../../components/template/BreadCrumb\";",
      "import Header from \"../../components/template/Header\";",
      "import { Link } from \"react-router-dom\";",
      "import { useHistory } from \"react-router-dom\";",
      "import Spinner from \"../../components/layout/Spinner\";",
      "import AddForm from \"../../components/common/AddForm\";",
      "import { upload } from \"../../shared/upload\";",
      "import {",
      "  initialValues,",
      "  inputFields,",
      "  PAGE_TITLE,",
      "  PAGE_SINGLE_TITLE,",
      "  LINK_URL,",
      "} from \"../../shared/enums/$2s_enum\";",
      "import { useUpdate$1, useSingle$1 } from \"../../shared/hooks/Use$1\";",
      "const Edit$1 = ({ match }) => {",
      "  let history = useHistory();",
      "  const [data] = useSingle$1(match.params.id);",
      "  const [updateData] = useUpdate$1();",
      "  const { loading, $2 } = data;",
      "  const [featuredImage, setFeaturedImage] = useState(null);",
      "  const [gallery, setGallery] = useState(null);",
      "  const [dropdownOptions, setDropdownOptions] = useState(null);",
      "  const submitFormClicked = async (values) => {",
      "    if (featuredImage || gallery) {",
      "      const images = await upload(featuredImage, gallery);",
      "      if (images) {",
      "        if (images.featured_image) {",
      "          values.featured_image = images.featured_image;",
      "        }",
      "        if (images.gallery_images) {",
      "          values.gallery = images.gallery_images;",
      "        }",
      "      }",
      "    }",
      "    await updateData($2._id, values);",
      "",
      "    history.push(`/\\${LINK_URL}/${$2._id}/view`);",
      "  };",
      "",
      "  return (",
      "    <div className=\"pace-done\">",
      "      <div>",
      "        <Header />",
      "        <BreadCrumb",
      "          title={`Edit \\${PAGE_SINGLE_TITLE}`}",
      "          mainLinkTitle={PAGE_TITLE}",
      "          mainLinkUrl={LINK_URL}",
      "          activeLink=\"Edit\"",
      "        />",
      "      </div>",
      "      <div className=\"container-fluid\">",
      "        <div className=\"col-lg-12\">",
      "          <div className=\"card\">",
      "            {!loading ? (",
      "              $2 && (",
      "                <div>",
      "                  <div className=\"card-header\">",
      "                    <div>",
      "                      <h4 className=\"card-title\">",
      "                        {$2[Object.keys(inputFields)[0]]} -{\" \"}",
      "                        <span>Edit</span>{\" \"}",
      "                      </h4>",
      "                      <p className=\"card-title-desc\">",
      "                        <Link",
      "                          to={`/\\${LINK_URL}`}",
      "                          className=\"btn btn-soft-light\"",
      "                        >",
      "                          <i className=\"fa fa-angle-left\"></i> {PAGE_TITLE}",
      "                        </Link>",
      "                        <Link",
      "                          to={`/\\${LINK_URL}/${$2._id}/view`}",
      "                          className=\"btn btn-soft-light\"",
      "                        >",
      "                          <i className=\"fa fa-eye\"></i>",
      "                        </Link>",
      "                      </p>",
      "                    </div>",
      "                  </div>",
      "                  <AddForm",
      "                    data={$2}",
      "                    edit={true}",
      "                    featuredImage={featuredImage}",
      "                    gallery={gallery}",
      "                    setFeaturedImage={setFeaturedImage}",
      "                    setGallery={setGallery}",
      "                    submitForm={submitFormClicked}",
      "                    inputFields={inputFields}",
      "                    initialValues={initialValues}",
      "                    dropdown_options={dropdownOptions}",
      "                  />",
      "                </div>",
      "              )",
      "            ) : (",
      "              <div className=\"text-center\">",
      "                <Spinner />",
      "              </div>",
      "            )}",
      "          </div>",
      "        </div>",
      "      </div>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default Edit$1;",
      ""
    ],
    "description": "Clean Edit Page Generator"
  },
  "Clean Single Page Generator": {
    "prefix": "clean-single-page-generator",
    "body": [
      "import React, { useEffect } from \"react\";",
      "import BreadCrumb from \"../../components/template/BreadCrumb\";",
      "import Header from \"../../components/template/Header\";",
      "import Spinner from \"../../components/layout/Spinner\";",
      "import {",
      "  inputFields,",
      "  PAGE_TITLE,",
      "  PAGE_SINGLE_TITLE,",
      "  LINK_URL,",
      "} from \"../../shared/enums/$2s_enum\";",
      "import SingleView from \"../../components/common/SingleView\";",
      "import { useSingle$1 } from \"../../shared/hooks/Use$1\";",
      "const View$1 = ({ match }) => {",
      "  const [data] = useSingle$1(match.params.id);",
      "  const { loading, $2 } = data;",
      "  return (",
      "    <div className=\"pace-done\">",
      "      <div>",
      "        <Header />",
      "        <BreadCrumb",
      "          title={PAGE_SINGLE_TITLE}",
      "          mainLinkTitle={PAGE_TITLE}",
      "          mainLinkUrl={LINK_URL}",
      "          activeLink=\"View\"",
      "        />",
      "        {!loading ? (",
      "          $2 && (",
      "            <SingleView",
      "              data={$2}",
      "              inputFields={inputFields}",
      "              label={PAGE_SINGLE_TITLE}",
      "              link={LINK_URL}",
      "              id={$2._id}",
      "            />",
      "          )",
      "        ) : (",
      "          <div>",
      "            <Spinner />",
      "          </div>",
      "        )}",
      "      </div>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default View$1;",
      ""
    ],
    "description": "Clean Single Page Generator"
  },
  "Clean Enum Generator": {
    "prefix": "clean-enum-file-generator",
    "body": [
      "import moment from \"moment\";",
      "",
      "export const PAGE_TITLE = \"Categories\";",
      "export const PAGE_SINGLE_TITLE = \"Category\";",
      "export const LINK_URL = \"categories\";",
      "export const SEARCH_TERMS = [\"name\", \"meta_title\"];",
      "export const inputFields = {",
      "  name: {",
      "    type: \"string\",",
      "    required: true,",
      "    title: \"Name\",",
      "    slug: true,",
      "    inputType: \"text\",",
      "  },",
      "  content: {",
      "    type: \"html\",",
      "    required: false,",
      "    title: \"Content\",",
      "  },",
      "  category_image: {",
      "    type: \"file\",",
      "    required: false,",
      "    title: \"Category Image\",",
      "  },",
      "  banners: {",
      "    type: \"gallery\",",
      "    required: false,",
      "    title: \"Banners\",",
      "  },",
      "  parent_category: {",
      "    type: \"select\",",
      "    required: false,",
      "    title: \"Parent Category\",",
      "  },",
      "  show_on_header: {",
      "    type: \"checkbox\",",
      "    required: false,",
      "    title: \"Show on Header\",",
      "  },",
      "  published_date: {",
      "    type: \"string\",",
      "    required: true,",
      "    title: \"Published Date\",",
      "    inputType: \"date\",",
      "  },",
      "",
      "  meta_title: {",
      "    type: \"string\",",
      "    required: false,",
      "    title: \"Meta Title\",",
      "  },",
      "  meta_description: {",
      "    type: \"text\",",
      "    required: false,",
      "    title: \"Meta Description\",",
      "  },",
      "  is_red_color: {",
      "    type: \"checkbox\",",
      "    required: false,",
      "    title: \"Red Color\",",
      "  },",
      "  slug: {",
      "    type: \"slug\",",
      "    required: false,",
      "    targetField: \"name\",",
      "    title: \"Slug\",",
      "  },",
      "};",
      "export const initialValues = {",
      "  name: \"\",",
      "  content: \"\",",
      "  parent_category: \"\",",
      "  show_on_header: false,",
      "  published_date: moment().format(\"YYYY-MM-DD\"),",
      "  meta_title: \"\",",
      "  meta_description: \"\",",
      "  slug: \"\",",
      "};",
      "",
      "export const view_all_table = [",
      "  { name: \"Name\", value: \"name\" },",
      "  { name: \"Slug\", value: \"slug\" },",
      "];",
      ""
    ],
    "description": "Clean Enum Generator"
  },
  "Clean import Simply": {
    "prefix": "clean-import-simply",
    "body": [
      "import Add$1 from \"./containers/$2/Add$1\";",
      "import All$1s from \"./containers/$2/All$1s\";",
      "import View$1 from \"./containers/$2/View$1\";",
      "import Edit$1 from \"./containers/$2/Edit$1\";"
    ],
    "description": "Clean import Simply"
  },
  "Clean Route Simply": {
    "prefix": "clean-route-simply",
    "body": [
      "<PrivateRoutes exact path=\"/$2\" component={All$1s} />",
      "          <PrivateRoutes",
      "            exact",
      "            path=\"/$2/add\"",
      "            component={Add$1}",
      "          />",
      "          <PrivateRoutes",
      "            exact",
      "            path=\"/$2/:id/view\"",
      "            component={View$1}",
      "          />",
      "          <PrivateRoutes",
      "            exact",
      "            path=\"/$2/:id/edit\"",
      "            component={Edit$1}",
      "          />"
    ],
    "description": "Clean Route Simply"
  },
  "Clean Action Generator": {
    "prefix": "clean-action-generator",
    "body": [
      "import api from \"../../domain/api\";",
      "import {",
      "  GET_$1S,",
      "  ADD_$1,",
      "  EDIT_$1,",
      "  GET_$1,",
      "  RESET_$1,",
      "  GET_ALL_$1S,",
      "  ERROR_$1,",
      "} from \"../types/$3_type\";",
      "import { handleError } from \"../../shared/handleError\";",
      "import { setAlert } from \"./alert\";",
      "",
      "export const add$2 = (formData) => async (dispatch, getState) => {",
      "  try {",
      "    const { data } = await api.post(`/$4`, formData);",
      "    dispatch({",
      "      type: ADD_$1,",
      "      payload: data,",
      "    });",
      "  } catch (error) {",
      "    dispatch(handleErrorLocal(error));",
      "    dispatch(handleError(error));",
      "  }",
      "};",
      "export const get$2s =",
      "  ({ pageNumber = \"\", start_from = \"\", start_to = \"\", queryParams }) =>",
      "  async (dispatch) => {",
      "    try {",
      "      dispatch({",
      "        type: RESET_$1,",
      "      });",
      "",
      "      const { data } = await api.get(",
      "        `/$4?&pageNumber=${pageNumber}&start_from=${start_from}&start_to=${start_to}${queryParams}${queryParams}`",
      "      );",
      "",
      "      dispatch({",
      "        type: GET_$1S,",
      "        payload: data,",
      "      });",
      "    } catch (error) {",
      "      dispatch(handleErrorLocal(error));",
      "      dispatch(handleError(error));",
      "    }",
      "  };",
      "export const get$2 = (id) => async (dispatch) => {",
      "  try {",
      "    dispatch({",
      "      type: RESET_$1,",
      "    });",
      "    const { data } = await api.get(`/$4/${id}`);",
      "",
      "    dispatch({",
      "      type: GET_$1,",
      "      payload: data,",
      "    });",
      "  } catch (error) {",
      "    dispatch(handleErrorLocal(error));",
      "    dispatch(handleError(error));",
      "  }",
      "};",
      "export const edit$2 = (id, formData) => async (dispatch) => {",
      "  try {",
      "    const { data } = await api.put(`/$4/${id}`, formData);",
      "    dispatch({",
      "      type: EDIT_$1,",
      "      payload: data,",
      "    });",
      "  } catch (error) {",
      "    dispatch(handleErrorLocal(error));",
      "    dispatch(handleError(error));",
      "  }",
      "};",
      "export const delete$2 = (id) => async (dispatch) => {",
      "  try {",
      "    const { data } = await api.delete(`/$4/${id}`);",
      "    dispatch(setAlert(\"$2 Deleted Successfully\", \"success\"));",
      "  } catch (error) {",
      "    dispatch(handleErrorLocal(error));",
      "    dispatch(handleError(error));",
      "  }",
      "};",
      "export const getAll$2s = () => async (dispatch) => {",
      "  try {",
      "    const { data } = await api.get(`/$4/all`);",
      "",
      "    dispatch({",
      "      type: GET_ALL_$1S,",
      "      payload: data,",
      "    });",
      "  } catch (error) {",
      "    dispatch(handleErrorLocal(error));",
      "    dispatch(handleError(error));",
      "  }",
      "};",
      "",
      "export const handleErrorLocal = () => async (dispatch) => {",
      "  dispatch({ type: ERROR_$1 });",
      "};",
      ""
    ],
    "description": "Clean Action Generator"
  },
  "Clean Reducer Generator": {
    "prefix": "clean-reducer-generator",
    "body": [
      "import {",
      "  GET_$1S,",
      "  ADD_$1,",
      "  EDIT_$1,",
      "  GET_$1,",
      "  RESET_$1,",
      "  GET_ALL_$1S,",
      "  ERROR_$1,",
      "} from \"../types/$2_type\";",
      "",
      "const initialState = {",
      "  $2s: null,",
      "  page: null,",
      "  pages: null,",
      "  $2: null,",
      "  total_$2s: 0,",
      "  loading: true,",
      "  error: {},",
      "  $2_message: null,",
      "  all_$2s: null,",
      "};",
      "",
      "export const $2_reducer = (state = initialState, action) => {",
      "  const { type, payload } = action;",
      "",
      "  switch (type) {",
      "    case GET_$1S:",
      "      return {",
      "        ...state,",
      "        $2s: payload.$2s,",
      "        pages: payload.pages,",
      "        page: payload.page,",
      "        total_$2s: payload.count,",
      "        loading: false,",
      "        error: {},",
      "      };",
      "    case GET_ALL_$1S:",
      "      return {",
      "        ...state,",
      "        all_$2s: payload,",
      "        loading: false,",
      "        error: {},",
      "      };",
      "",
      "    case RESET_$1:",
      "      return {",
      "        ...state,",
      "        $2: null,",
      "        loading: true,",
      "        error: {},",
      "      };",
      "",
      "    case ADD_$1:",
      "      return {",
      "        ...state,",
      "        $2_message: payload,",
      "        loading: false,",
      "        error: {},",
      "      };",
      "    case GET_$1:",
      "      return {",
      "        ...state,",
      "        $2: payload,",
      "        loading: false,",
      "        error: {},",
      "      };",
      "    case EDIT_$1:",
      "      return {",
      "        ...state,",
      "        $2_message: payload,",
      "        loading: false,",
      "        error: {},",
      "      };",
      "    case ERROR_$1:",
      "      return {",
      "        ...state,",
      "        loading: false,",
      "        error: payload,",
      "      };",
      "",
      "    default:",
      "      return state;",
      "  }",
      "};",
      ""
    ],
    "description": "Clean Reducer Generator"
  },
  "Clean Type Generator": {
    "prefix": "clean-type-generator",
    "body": [
      "export const GET_$1S = \"GET_$1S\";",
      "export const ADD_$1 = \"ADD_$1\";",
      "export const EDIT_$1 = \"EDIT_$1\";",
      "export const GET_$1 = \"GET_$1\";",
      "export const RESET_$1 = \"RESET_$1\";",
      "export const ERROR_$1 = \"ERROR_$1\";",
      "export const GET_ALL_$1S = \"GET_ALL_$1S\";",
      ""
    ],
    "description": "Clean Type Generator"
  }
}
